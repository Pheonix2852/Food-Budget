generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(cuid())
  name       String
  // Clerk auth id for the user (e.g. clerk user id)
  authId     String?        @unique
  email      String?        @unique
  approved   Boolean        @default(false)
  role       Role           @default(USER)
  createdAt  DateTime       @default(now())
  groceries  Grocery[]
  extras     ExtraMeal[]
  schedules  MealSchedule[]
  batchMeals BatchMeal[]
}

enum Role {
  USER
  ADMIN
}

model JoinRequest {
  id        String   @id @default(cuid())
  authId    String   @unique
  email     String
  name      String?
  createdAt DateTime @default(now())
}

model Grocery {
  id     String   @id @default(cuid())
  item   String
  // Store currency as cents to avoid floating point issues on SQLite
  amount Int
  paid   Boolean
  date   DateTime @default(now())
  user   User?    @relation(fields: [userId], references: [id])
  userId String?

  @@index([date])
  @@index([userId])
}

model MealSchedule {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  breakfast Boolean  @default(true)
  lunch     Boolean  @default(true)
  dinner    Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model ExtraMeal {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  date   DateTime
  // SQLite has no enums; store as string and validate in app code
  type   String

  @@index([userId, date])
}

model BatchMeal {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  @@index([userId, startDate, endDate])
}

model MonthlyArchive {
  id    String @id @default(cuid())
  year  Int
  month Int
  data  Json

  @@unique([year, month])
  @@index([year, month])
}

model DisabledMeal {
  id         String   @id @default(cuid())
  date       DateTime
  // store as string to keep compatibility with SQLite environments
  type       String
  reason     String?  
  createdBy  String?  
  createdAt  DateTime @default(now())

  @@index([date])
  @@index([type])
}
